@use "variables" as var;

// Tailles de police
@mixin responsive-font($element) {
  font-size: map-get(map-get(var.$font-sizes, $element), "small");

  @media (min-width: map-get(var.$breakpoints, "medium")) {
    font-size: map-get(map-get(var.$font-sizes, $element), "medium");
  }

  @media (min-width: map-get(var.$breakpoints, "large")) {
    font-size: map-get(map-get(var.$font-sizes, $element), "large");
  }
}

// Espacements
@mixin responsive-gap($element) {
  gap: map-get(map-get(var.$gaps, $element), "small");

  @media (min-width: map-get(var.$breakpoints, "medium")) {
    gap: map-get(map-get(var.$gaps, $element), "medium");
  }

  @media (min-width: map-get(var.$breakpoints, "large")) {
    gap: map-get(map-get(var.$gaps, $element), "large");
  }
}

@mixin media-query($breakpoint) {
  @media (min-width: map-get(var.$breakpoints, $breakpoint)) {
    @content;
  }
}

// Gestion de la largeur des composants principaux
@mixin mainComponentsWidth {
  max-width: calc(100vw - 2 * map-get(var.$paddings, "header", "small"));

  @media (min-width: map-get(var.$breakpoints, "medium")) {
    max-width: calc(100vw - 2 * map-get(var.$paddings, "header", "medium"));
  }

  @media (min-width: map-get(var.$breakpoints, "large")) {
    max-width: var.$maxWidth;
  }
}
